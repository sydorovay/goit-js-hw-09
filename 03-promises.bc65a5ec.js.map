{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SA8BA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OADAC,QAAQC,IAAI,oBAAoBN,gBAAuBC,OAChD,IAAIM,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLR,EACFM,EAAQ,C,SAAER,E,MAAUC,IAEpBQ,EAAO,C,SAAET,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CArCAU,SAASC,cAAc,SAE/BC,iBAAiB,UAAUC,IAEQA,EAAlCC,iBAEuB,MAArBC,EAAQC,OAAOH,EAAII,OAAOC,SAASlB,MAAMmB,OACzCC,EAAOJ,OAAOH,EAAII,OAAOC,SAASE,KAAKD,OACvCE,EAASL,OAAOH,EAAII,OAAOC,SAASG,OAAOF,OAE3CG,EAAY,EAACvB,SAAEA,EAAQC,MAAEA,MAC7BuB,EAAA3B,GAAS4B,OAAOC,QAAQ,qBAAqB1B,QAAeC,OAC5DI,QAAQC,IAAI,uBAAqBN,QAAiBC,MAAU,EAExD0B,EAAY,EAAC3B,SAAEA,EAAQC,MAAEA,MAC7BuB,EAAA3B,GAAS4B,OAAOG,QAAQ,oBAAoB5B,QAAeC,OAC3DI,QAAQC,IAAI,sBAAoBN,QAAiBC,MAAU,EAGhB,IAAxC,MAAM4B,KAAKC,MAAMR,GAAQS,OAC5BhC,EAAc8B,EAAI,EAAGb,EAAQK,EAAOQ,GACjCG,MAAK,EAAChC,SAAEA,EAAQC,MAAEA,KAAYsB,EAAU,C,SAAEvB,E,MAAUC,MACpDgC,OAAM,EAACjC,SAAEA,EAAQC,MAAEA,KAAY0B,EAAU,C,SAAE3B,E,MAAUC,KAAS","sources":["src/js/03-promises.js"],"sourcesContent":["// Імпортуємо Notiflix.\nimport Notiflix from 'notiflix';\n\n// отримуємо посилання на форму і створюємо обробник події для відправки форми.\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', evt => {\n  // Відключаємо стандартну поведінку браузера\n  evt.preventDefault();\n  // Отримуємо значення полів форми\n  const delay = Number(evt.target.elements.delay.value);\n  const step = Number(evt.target.elements.step.value);\n  const amount = Number(evt.target.elements.amount.value);\n  // Створюємо функції для обробки успішного та неуспішного виконання промісустворює обробник події для відправки форми.\n  const onSuccess = ({ position, delay }) => {\n    Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  };\n  const onFailure = ({ position, delay }) => {\n    Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  };\n  // Запускаємо цикл для створення та виконання промісів.\n  for (const i of Array(amount).keys()) {\n    createPromise(i + 1, delay + step * i)\n      .then(({ position, delay }) => onSuccess({ position, delay }))\n      .catch(({ position, delay }) => onFailure({ position, delay }));\n  }\n});\n\n// Створюємо функцію createPromise, яка приймає position - позицію промісу та delay - затримку перед виконанням промісу.\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  console.log(`Creating promise ${position} with delay ${delay}ms`);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","console","log","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","evt","preventDefault","delay1","Number","target","elements","value","step","amount","onSuccess","$parcel$interopDefault","Notify","success","onFailure","failure","i","Array","keys","then","catch"],"version":3,"file":"03-promises.bc65a5ec.js.map"}